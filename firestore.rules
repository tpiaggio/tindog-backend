rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {

      function isValidNumber(numberToValidate) {
        return numberToValidate is number && numberToValidate >= 0;
      }
      
      function isValidString(stringToValidate) {
        return stringToValidate is string && stringToValidate.trim() != "";
      }
      
      function isValidDog() {
        return isValidString(request.resource.data.name) &&
        isValidString(request.resource.data.breed) &&
        isValidString(request.resource.data.size) &&
        isValidNumber(request.resource.data.age) &&
        isValidString(request.resource.data.description)
      }

      function isMessageAllowed(chatId) {
        return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
      }

      match /dogs/{dogId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.userId && isValidDog();
        allow update, delete: if false;
      }

      match /chats/{chatId} {
        allow read: if request.auth.uid in resource.data.userIds;
        allow write: if false;

        match /messages/{messageId} {
          allow read: if isMessageAllowed(chatId);
          allow create: if isMessageAllowed(chatId) && request.auth.uid == request.resource.data.userId;
          allow update, delete: if false;
        }
      }
    }
  }
}